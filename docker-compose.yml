
services:
  # cem:
  #   container_name: cem
  #   build: ./catoapp
  #   entrypoint: /django-entrypoint.sh
  #   env_file:
  #     - .env
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #     mongodb:
  #       condition: service_started
  #   restart: ${RESTART_POLICY}
  #   command: >
  #       sh -c "python catoapp/manage.py runserver 0.0.0.0:8000 --noreload"
  #   healthcheck:
  #     test: curl --fail http://localhost:8000 || exit 1
  #     interval: 60s
  #     retries: 12
  #     timeout: 5s

  db:
    image: postgres:latest
    restart: ${RESTART_POLICY}
    environment:
      POSTGRES_DB: ${POSTGRES_DB1}
      POSTGRES_USER: ${POSTGRES_USER1}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD1}
      ports: ${POSTGRES_PORT1}
    env_file:
      - .env
    volumes:
      - ${DB_VOLUME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -d ${POSTGRES_DB1} -U ${POSTGRES_USER1}'"]
      interval: 10s
      timeout: 5s
      retries: 12

  # mongodb:
  #   image: mongo
  #   restart: ${RESTART_POLICY}
  #   env_file:
  #     - .env
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet
  #     interval: 600s
  #     timeout: 15s
  #     retries: 2
  #     start_period: 0s
  #     start_interval: 1s
  #   volumes:
  #     - ${MONGO_DB_VOLUME}
  #   ports:
  #     - "27017:27017"

  # catoweb:
  #   container_name: catoweb
  #   build:
  #     context: ./catoweb
  #     dockerfile: Dockerfile
  #   restart: ${RESTART_POLICY}
  #   volumes:
  #    - .:/app/
  #   ports:
  #     - "${FRONTEND_PORT}:80"
  #   depends_on:
  #     - cem

  # redis:
  #   image: redis
  #   restart: ${RESTART_POLICY}
  #   env_file:
  #     - .env
    # deploy:
    #   resources:
    #     limits:
    #       memory: 100M
    #     reservations:
    #       memory: 50M

  # celery-worker:
  #   build: ./catoapp
  #   env_file:
  #     - .env
  #   restart: ${RESTART_POLICY}
  #   # volumes:
  #   #   - .:/code
  #   depends_on:
  #     redis:
  #       condition: service_started
  #     cem:
  #       condition: service_started
  #     db:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #   # deploy:
  #   #   resources:
  #   #     limits:
  #   #       memory: 200M
  #   #     reservations:
  #   #       memory: 50M
  #   command: celery -A catoapp worker --pool=solo --loglevel ERROR
  #   # command: celery -A catoapp worker --pool=solo -l INFO

  # celery-beat:
  #   build: ./catoapp
  #   restart: ${RESTART_POLICY}
  #   # volumes:
  #   #   - .:/code
  #   env_file:
  #     - .env
  #   depends_on:
  #     redis:
  #       condition: service_started
  #     cem:
  #       condition: service_started
  #     db:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #   # deploy:
  #   #   resources:
  #   #     limits:
  #   #       memory: 100M
  #   #     reservations:
  #   #       memory: 50M
  #   command: celery -A catoapp beat --loglevel ERROR
  #   # command: celery -A catoapp beat -l INFO

  # frontend:
  #   container_name: catoweb
  #   build:
  #     context: catoweb
  #     dockerfile: Dockerfile
  # nginx:
  #   container_name: middlenginx
  #   image: nginx:stable-alpine
  #   expose:
  #     - "80"
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.middle.conf:/etc/nginx/conf.d/default.conf:rw

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${POSTGRES_USER1}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD1}
    volumes:
      - /c/dbs/pgadmin:/var/lib/pgadmin
